package xyz.neruxov.prodcontestbot.service.bot

import com.pengrad.telegrambot.TelegramBot
import com.pengrad.telegrambot.model.CallbackQuery
import com.pengrad.telegrambot.model.Message
import com.pengrad.telegrambot.model.User
import com.pengrad.telegrambot.model.request.InlineKeyboardMarkup
import com.pengrad.telegrambot.request.BaseRequest
import com.pengrad.telegrambot.request.EditMessageText
import com.pengrad.telegrambot.request.SendMessage
import org.springframework.stereotype.Service
import xyz.neruxov.prodcontestbot.data.user.model.TripUser
import xyz.neruxov.prodcontestbot.data.user.repo.UserRepository
import xyz.neruxov.prodcontestbot.state.ProfileModificationState
import xyz.neruxov.prodcontestbot.util.logic.BotKeyboard
import xyz.neruxov.prodcontestbot.util.logic.EmptyMessage
import xyz.neruxov.prodcontestbot.util.osm.NominatimUtil
import xyz.neruxov.prodcontestbot.util.osm.data.City
import xyz.neruxov.prodcontestbot.util.osm.data.Coordinates
import xyz.neruxov.prodcontestbot.util.other.ThreadUtil
import java.util.concurrent.CompletableFuture
import kotlin.jvm.optionals.getOrElse

/**
 * @author <a href="https://github.com/Neruxov">Neruxov</a>
 */
@Service
class ProfileService(
    val userRepository: UserRepository
) {

    private final val stateMap = mutableMapOf<Long, ProfileModificationState>()
    private final val cityMap = mutableMapOf<Long, City>()

    fun handleQuery(query: CallbackQuery, user: User, bot: TelegramBot): BaseRequest<*, *> {
        val tripUser = userRepository.findById(user.id()).getOrElse { return EmptyMessage(user.id()) }
        return when (query.data()) {
            "profile" -> myProfile(tripUser, user, query, bot)
            "profile_change_city" -> changeCity(tripUser, user, query, bot)
            "profile_change_age" -> changeAge(tripUser, user, query, bot)
            "profile_change_bio" -> changeBio(tripUser, user, query, bot)
            else -> EmptyMessage(user.id())
        }
    }

    fun handleMessage(message: Message, user: User, bot: TelegramBot): BaseRequest<*, *> {
        val tripUser = userRepository.findById(user.id()).getOrElse { return EmptyMessage(user.id()) }
        return when (checkState(user)) {
            ProfileModificationState.CITY -> getCity(tripUser, user, message, bot)
            ProfileModificationState.AGE -> getAge(tripUser, user, message, bot)
            ProfileModificationState.BIO -> getBio(tripUser, user, message, bot)
            else -> EmptyMessage(user.id())
        }
    }

    fun handleConfirmQuery(query: CallbackQuery, user: User, bot: TelegramBot): BaseRequest<*, *> {
        val tripUser = userRepository.findById(user.id()).getOrElse { return EmptyMessage(user.id()) }
        return when (checkState(user)) {
            ProfileModificationState.CONFIRM_CITY -> confirmCity(tripUser, user, query, bot)
            else -> EmptyMessage(user.id())
        }
    }

    fun myProfile(tripUser: TripUser, user: User, query: CallbackQuery, bot: TelegramBot): BaseRequest<*, *> {
        return EditMessageText(
            query.message().chat().id(),
            query.message().messageId(),
            "–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n" +
                    "üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: ${tripUser.username}\n" +
                    "üåÜ –ì–æ—Ä–æ–¥: ${tripUser.city.displayName}, ${tripUser.city.getCountry().displayName}\n" +
                    "üë∂ –í–æ–∑—Ä–∞—Å—Ç: ${tripUser.age ?: "–ù–µ —É–∫–∞–∑–∞–Ω"}\n" +
                    "üìÉ –ë–∏–æ: ${tripUser.bio ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}"
        ).replyMarkup(BotKeyboard.PROFILE.keyboard as InlineKeyboardMarkup)
    }

    fun changeCity(tripUser: TripUser, user: User, query: CallbackQuery, bot: TelegramBot): BaseRequest<*, *> {
        stateMap[user.id()] = ProfileModificationState.CITY
        return SendMessage(
            user.id(),
            """
                –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç 
            
                –ò–∑ –Ω–µ–≥–æ –±—É–¥—É—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–≤–æ–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.
            """.trimIndent()
        ).replyMarkup(BotKeyboard.SHARE_LOCATION.keyboard)
    }

    fun getCity(tripUser: TripUser, user: User, message: Message, bot: TelegramBot): BaseRequest<*, *> {
        val cityFuture: CompletableFuture<City>
        if (message.text() != null && City.getFromDisplayName(message.text()) != City.UNKNOWN) {
            val cityObject = City.getFromDisplayName(message.text())
            cityFuture = CompletableFuture.completedFuture(cityObject)
        } else {
            if (message.location() != null) {
                val lat = message.location().latitude()
                val lon = message.location().longitude()
                cityFuture = NominatimUtil.reverseGeocode(Coordinates(lat.toDouble(), lon.toDouble()))
            } else {
                if (message.text() == null) return EmptyMessage(user.id())
                cityFuture = NominatimUtil.getCityByName(message.text())
            }
        }

        cityFuture.thenAccept { city ->
            if (city == City.UNKNOWN) {
                bot.execute(
                    SendMessage(
                        user.id(),
                        """
                            –ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ :(
                             
                            –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.
                        """.trimIndent()
                    )
                )

                return@thenAccept
            }

            stateMap[user.id()] = ProfileModificationState.CONFIRM_CITY
            cityMap[user.id()] = city

            bot.execute(
                SendMessage(
                    user.id(),
                    """
                        –¢—ã –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ ${city.displayName}, ${city.getCountry().displayName}.
                         
                        –í—Å—ë –≤–µ—Ä–Ω–æ?
                    """.trimIndent()
                ).replyMarkup(BotKeyboard.CONFIRM_INLINE.keyboard)
            )
        }

        ThreadUtil.execute { cityFuture.join() }
        return SendMessage(user.id(), "–û–ø—Ä–µ–¥–µ–ª—è—é –≥–æ—Ä–æ–¥... üîé")
            .replyMarkup(BotKeyboard.REMOVE_KEYBOARD.keyboard)
    }

    fun confirmCity(tripUser: TripUser, user: User, query: CallbackQuery, bot: TelegramBot): BaseRequest<*, *> {
        if (query.data() == "yes") {
            tripUser.city = cityMap[user.id()]!!
            userRepository.save(tripUser)

            stateMap.remove(user.id())
            cityMap.remove(user.id())

            return SendMessage(
                user.id(),
                """
                    –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! üåÜ
                     
                    –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏–∑ ${tripUser.city.displayName}, ${tripUser.city.getCountry().displayName}.
                """.trimIndent()
            ).replyMarkup(BotKeyboard.PROFILE.keyboard)
        } else {
            stateMap.remove(user.id())
            cityMap.remove(user.id())

            return SendMessage(user.id(), "–•–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω–∏–ª! üëå")
                .replyMarkup(BotKeyboard.TO_PROFILE.keyboard)
        }
    }

    fun changeAge(tripUser: TripUser, user: User, query: CallbackQuery, bot: TelegramBot): BaseRequest<*, *> {
        stateMap[user.id()] = ProfileModificationState.AGE
        return SendMessage(
            user.id(),
            """
                –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç üëá
            
                –û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤.
            """.trimIndent()
        ).replyMarkup(BotKeyboard.REMOVE_KEYBOARD.keyboard)
    }

    fun getAge(tripUser: TripUser, user: User, message: Message, bot: TelegramBot): BaseRequest<*, *> {
        val age = message.text().toIntOrNull()
        if (age == null || age < 0 || age > 100) {
            return SendMessage(user.id(), "–ù–∞–ø–∏—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç ??")
                .replyMarkup(BotKeyboard.REMOVE_KEYBOARD.keyboard)
        }

        tripUser.age = age
        userRepository.save(tripUser)
        stateMap.remove(user.id())

        return SendMessage(
            user.id(),
            """
                –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! üë∂
                 
                –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ $age –ª–µ—Ç.
            """.trimIndent()
        ).replyMarkup(BotKeyboard.PROFILE.keyboard)
    }

    fun changeBio(tripUser: TripUser, user: User, query: CallbackQuery, bot: TelegramBot): BaseRequest<*, *> {
        stateMap[user.id()] = ProfileModificationState.BIO
        return SendMessage(
            user.id(),
            """
                –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –Ω–æ–≤—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é üëá 
            
                –û–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.
            """.trimIndent()
        ).replyMarkup(BotKeyboard.REMOVE_KEYBOARD.keyboard)
    }

    fun getBio(tripUser: TripUser, user: User, message: Message, bot: TelegramBot): BaseRequest<*, *> {
        tripUser.bio = message.text()
        userRepository.save(tripUser)
        stateMap.remove(user.id())

        return SendMessage(
            user.id(),
            """
                –ë–∏–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞! üìÉ
                 
                –¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è: ${tripUser.bio}
            """.trimIndent()
        ).replyMarkup(BotKeyboard.PROFILE.keyboard)
    }

    fun checkState(user: User): ProfileModificationState {
        return stateMap.getOrDefault(user.id(), ProfileModificationState.NONE)
    }

}