package xyz.neruxov.prodcontestbot.service.bot

import com.pengrad.telegrambot.TelegramBot
import com.pengrad.telegrambot.model.CallbackQuery
import com.pengrad.telegrambot.model.Message
import com.pengrad.telegrambot.model.User
import com.pengrad.telegrambot.request.AnswerCallbackQuery
import com.pengrad.telegrambot.request.SendMessage
import org.springframework.stereotype.Service
import xyz.neruxov.prodcontestbot.data.user.model.TripUser
import xyz.neruxov.prodcontestbot.data.user.repo.UserRepository
import xyz.neruxov.prodcontestbot.state.SignUpState
import xyz.neruxov.prodcontestbot.util.logic.BotKeyboard
import xyz.neruxov.prodcontestbot.util.logic.EmptyMessage
import xyz.neruxov.prodcontestbot.util.osm.NominatimUtil
import xyz.neruxov.prodcontestbot.util.osm.data.City
import xyz.neruxov.prodcontestbot.util.osm.data.Coordinates
import xyz.neruxov.prodcontestbot.util.other.ThreadUtil
import java.util.concurrent.CompletableFuture


/**
 * @author <a href="https://github.com/Neruxov">Neruxov</a>
 */
@Service
class SignUpService(
    val userRepository: UserRepository,
) {

    companion object {

        private const val USERNAME_REGEX = "^[a-zA-Z0-9]{5,32}$"

    }

    val stateMap = mutableMapOf<Long, SignUpState>()
    val dataMap = mutableMapOf<Long, MutableMap<String, Any>>()

    fun handleStartCommand(user: User, bot: TelegramBot): SendMessage {
        if (userRepository.existsByTelegramId(user.id()))
            return EmptyMessage(user.id())

        if (checkState(user) != SignUpState.NONE)
            return keepState(user, bot)

        return nextState(user, bot)
    }

    fun handleMessage(message: Message, user: User, bot: TelegramBot): SendMessage {
        return when (checkState(user)) {
            SignUpState.USERNAME -> getUsername(message, user, bot)
            SignUpState.LOCATION -> getLocation(message, user, bot)
            SignUpState.AGE -> getAge(message, user, bot)
            SignUpState.BIO -> getBio(message, user, bot)
            else -> EmptyMessage(user.id())
        }
    }

    fun handleConfirmQuery(query: CallbackQuery, user: User, bot: TelegramBot): SendMessage {
        bot.execute(AnswerCallbackQuery(query.id()))

        return when (checkState(user)) {
            SignUpState.CONFIRM_USERNAME -> confirmUsername(query, user, bot)
            SignUpState.CONFIRM_LOCATION -> confirmLocation(query, user, bot)
            SignUpState.CONFIRM_AGE -> confirmAge(query, user, bot)
            SignUpState.CONFIRM_BIO -> confirmBio(query, user, bot)
            else -> EmptyMessage(user.id())
        }
    }

    fun getUsername(message: Message, user: User, bot: TelegramBot): SendMessage {
        if (message.text() == null)
            return EmptyMessage(user.id())

        if (message.text().length > 32)
            return SendMessage(
                user.id(),
                """
                    –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π :( –ü–æ–ø—Ä–æ–±—É–π —É–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ 32 —Å–∏–º–≤–æ–ª–∞.
                """.trimIndent()
            )

        if (message.text().length < 5)
            return SendMessage(
                user.id(),
                """
                    –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π :( –ü–æ–ø—Ä–æ–±—É–π —É–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ 5 —Å–∏–º–≤–æ–ª–æ–≤.
                """.trimIndent()
            )

        if (!message.text().matches(Regex(USERNAME_REGEX)))
            return SendMessage(
                user.id(),
                """
                    –ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã :( –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–¥—É–º–∞—Ç—å –¥—Ä—É–≥–æ–π.
                """.trimIndent()
            )

        if (userRepository.existsByUsernameIgnoreCase(message.text()))
            return SendMessage(
                user.id(),
                """
                    –¢–∞–∫–æ–π –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç :( –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–¥—É–º–∞—Ç—å –¥—Ä—É–≥–æ–π.
                """.trimIndent()
            )

        dataMap[user.id()] = mutableMapOf("username" to message.text())
        return nextState(user, bot)
    }

    fun confirmUsername(query: CallbackQuery, user: User, bot: TelegramBot): SendMessage {
        if (query.data() == "yes") {
            return nextState(user, bot)
        } else {
            dataMap.remove(user.id())
            previousState(user, bot)
            return SendMessage(
                user.id(),
                """
                    –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑. –£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.
                """.trimIndent()
            )
        }
    }

    fun getLocation(message: Message, user: User, bot: TelegramBot): SendMessage {
        val city: CompletableFuture<City>

        if (message.text() != null && City.getFromDisplayName(message.text()) != City.UNKNOWN) {
            dataMap[user.id()]?.put("city", City.getFromDisplayName(message.text()))
            return nextState(user, bot)
        }

        if (message.location() != null) {
            val lat = message.location().latitude()
            val lon = message.location().longitude()
            city = NominatimUtil.reverseGeocode(Coordinates(lat.toDouble(), lon.toDouble()))
        } else {
            if (message.text() == null) return EmptyMessage(user.id())
            city = NominatimUtil.getCityByName(message.text())
        }

        city.thenAccept {
            if (it == City.UNKNOWN) {
                bot.execute(
                    SendMessage(
                        user.id(),
                        """
                        –ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ :(
                         
                         –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.
                    """.trimIndent()
                    )
                )

                return@thenAccept
            }

            dataMap[user.id()]?.put("city", it)
            bot.execute(nextState(user, bot))
        }

        ThreadUtil.execute { city.join() }
        return SendMessage(user.id(), "–û–ø—Ä–µ–¥–µ–ª—è—é –≤–∞—à –≥–æ—Ä–æ–¥... üîé")
            .replyMarkup(BotKeyboard.REMOVE_KEYBOARD.keyboard)
    }

    fun confirmLocation(query: CallbackQuery, user: User, bot: TelegramBot): SendMessage {
        if (query.data() == "yes") {
            return nextState(user, bot)
        } else {
            dataMap[user.id()]?.remove("city")
            previousState(user, bot)
            return SendMessage(
                user.id(),
                """
                    –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑. –ü–æ–¥–µ–ª–∏—Å—å –ª–æ–∫–∞—Ü–∏–µ–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üëá
                """.trimIndent()
            ).replyMarkup(BotKeyboard.SHARE_LOCATION.keyboard)
        }
    }

    fun getAge(message: Message, user: User, bot: TelegramBot): SendMessage {
        if (message.text() == null)
            return EmptyMessage(user.id())

        if (message.text() == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
            return skipState(user, bot)

        val age = message.text().toIntOrNull()
        if (age == null || age < 0) {
            return SendMessage(
                user.id(),
                """
                    –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.
                """.trimIndent()
            )
        }

        dataMap[user.id()]?.put("age", age)
        return nextState(user, bot)
    }

    fun confirmAge(query: CallbackQuery, user: User, bot: TelegramBot): SendMessage {
        return when (query.data()) {
            "yes" -> nextState(user, bot)
            "no" -> {
                dataMap[user.id()]?.remove("age")
                previousState(user, bot)
                SendMessage(
                    user.id(),
                    """
                        –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑. –£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.
                    """.trimIndent()
                )
            }

            else -> EmptyMessage(user.id())
        }
    }

    fun getBio(message: Message, user: User, bot: TelegramBot): SendMessage {
        if (message.text() == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
            return skipState(user, bot)

        if (message.text().length > 255) {
            return SendMessage(
                user.id(),
                """
                    –ß–µ—Ä–µ—Å—á—É—Ä –ø–æ–¥—Ä–æ–±–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —É–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ 255 —Å–∏–º–≤–æ–ª–æ–≤.
                """.trimIndent()
            )
        }

        dataMap[user.id()]?.put("bio", message.text())
        return nextState(user, bot)
    }

    fun confirmBio(query: CallbackQuery, user: User, bot: TelegramBot): SendMessage {
        if (query.data() == "yes") {
            return nextState(user, bot)
        } else {
            dataMap[user.id()]?.remove("bio")
            previousState(user, bot)
            return SendMessage(
                user.id(),
                """
                    –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑. –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.
                """.trimIndent()
            )
        }
    }

    private fun checkState(user: User): SignUpState {
        return stateMap[user.id()] ?: SignUpState.NONE
    }

    private fun previousState(user: User, bot: TelegramBot): SendMessage {
        return changeState(checkState(user).previous(), user, bot)
    }

    private fun keepState(user: User, bot: TelegramBot): SendMessage {
        return changeState(checkState(user), user, bot)
    }

    private fun nextState(user: User, bot: TelegramBot): SendMessage {
        return changeState(checkState(user).next(), user, bot)
    }

    private fun skipState(user: User, bot: TelegramBot): SendMessage {
        return changeState(checkState(user).skip(), user, bot)
    }

    private fun changeState(signUpState: SignUpState, user: User, bot: TelegramBot): SendMessage {
        stateMap[user.id()] = signUpState
        when (signUpState) {
            SignUpState.USERNAME -> {
                return SendMessage(
                    user.id(),
                    """
                        –ü—Ä–∏–≤–µ—Ç, ${user.firstName()}! üëã
        
                        ü§ñ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ç–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ - –º–æ–∂–µ—à—å —É–±–µ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º —Å–∞–º!
        
                        –°–ø–µ—Ä–≤–∞ –ø—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –Ω–∏–∫–Ω–µ–π–º - –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–±—è –≤ –±–æ—Ç–µ.
                    """.trimIndent()
                )
            }

            SignUpState.CONFIRM_USERNAME -> {
                val username = dataMap[user.id()]?.get("username") as String

                return SendMessage(
                    user.id(),
                    """
                        –¢–≤–æ–π –Ω–∏–∫–Ω–µ–π–º: $username
                        
                        ‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤ –±—É–¥—É—â–µ–º. 
                        
                        –£–≤–µ—Ä–µ–Ω?
                    """.trimIndent()
                ).replyMarkup(BotKeyboard.CONFIRM_INLINE.keyboard)
            }

            SignUpState.LOCATION -> {
                return SendMessage(
                    user.id(),
                    """
                        –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å.
                        
                        –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å –ª–æ–∫–∞—Ü–∏–µ–π üìç
                    """.trimIndent()
                ).replyMarkup(BotKeyboard.SHARE_LOCATION.keyboard)
            }

            SignUpState.CONFIRM_LOCATION -> {
                val city = dataMap[user.id()]?.get("city") as City

                return SendMessage(
                    user.id(),
                    """
                        –¢—ã –∏–∑ –≥–æ—Ä–æ–¥–∞ ${city.displayName}, ${city.getCountry().displayName}?
                    """.trimIndent()
                ).replyMarkup(BotKeyboard.CONFIRM_INLINE.keyboard)
            }

            SignUpState.AGE -> {
                return SendMessage(
                    user.id(),
                    """
                        –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.
                        
                        –í–æ–∑—Ä–∞—Å—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤–∞—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.
                        
                        –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–∑–∂–µ, –Ω–∞–∂–º–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" üëá
                    """.trimIndent()
                ).replyMarkup(BotKeyboard.SKIP_REPLY.keyboard)
            }

            SignUpState.CONFIRM_AGE -> {
                val age = dataMap[user.id()]?.get("age") as Int

                return SendMessage(
                    user.id(),
                    """
                            –¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: $age
                            
                            –í—Å–µ –≤–µ—Ä–Ω–æ?
                        """.trimIndent()
                ).replyMarkup(BotKeyboard.CONFIRM_INLINE.keyboard)
            }

            SignUpState.BIO -> {
                return SendMessage(
                    user.id(),
                    """
                        –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ø–æ–ª—É—á—à–µ.
                        
                        –ï—Å–ª–∏ —Ç—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–∑–∂–µ, –Ω–∞–∂–º–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" üëá
                    """.trimIndent(),
                ).replyMarkup(BotKeyboard.SKIP_REPLY.keyboard)
            }

            SignUpState.CONFIRM_BIO -> {
                val bio = dataMap[user.id()]?.get("bio") as String
                return SendMessage(
                    user.id(),
                    """
                        –¢–≤–æ—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è:
                        
                        $bio
                        
                        –í—Å–µ –≤–µ—Ä–Ω–æ?
                    """.trimIndent()
                ).replyMarkup(BotKeyboard.CONFIRM_INLINE.keyboard)
            }

            SignUpState.DONE -> {
                val city = dataMap[user.id()]?.get("city") as City
                val age = dataMap[user.id()]?.get("age") as Int?
                val bio = dataMap[user.id()]?.get("bio") as String?
                val username = dataMap[user.id()]?.get("username") as String

                userRepository.save(
                    TripUser(
                        user.id(),
                        username,
                        city,
                        age,
                        bio
                    )
                )

                dataMap.remove(user.id())
                stateMap.remove(user.id())

                BotKeyboard.removeKeyboard(user.id(), bot)

                return SendMessage(
                    user.id(),
                    """
                        –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.
                    """.trimIndent()
                ).replyMarkup(BotKeyboard.MAIN_MENU.keyboard)
            }

            else -> return EmptyMessage(user.id())
        }
    }

}